{"version":3,"sources":["components/Header/Header.js","components/MyFeatureLayer/MyFeatureLayer.js","components/ContentForm/ContentForm.js","services/Feature.service.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","MyFeatureLayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","myFeatureLayer","graphic","_this2","loadModules","then","_ref","_ref2","slicedToArray","Graphic","FeatureLayer","url","featureLayerProperties","setState","map","add","geometry","type","rings","symbol","color","outline","width","view","graphics","catch","err","console","error","remove","ContentForm","ContentFormResults","FeatureService","getAllFeatures","fetch","response","json","log","MapContainer","viewProperties","center","scale","status","handleMapLoad","bind","assertThisInitialized","getFetures","rel","href","esm","style","mapProperties","basemap","onLoad","MyFeatureLayer_MyFeatureLayer","components_ContentForm_ContentForm","App","components_Header_Header","Map_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75e67954.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n        \t<div className=\"header\">\r\n        \t<div className=\"logo\"></div>\r\n        \t<div className=\"header-button\">Выход</div>\r\n        \t</div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Header  ","import { Component } from 'react';\r\nimport { loadModules } from '@esri/react-arcgis';\r\n\r\nexport default class MyFeatureLayer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myFeatureLayer: null,\r\n            graphic: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n\r\n    componentWillMount() {\r\n        loadModules(['esri/Graphic', 'esri/layers/FeatureLayer']).then(([ Graphic, FeatureLayer]) => {\r\n            const myFeatureLayer = new FeatureLayer({\r\n                url: this.props.featureLayerProperties.url\r\n              });\r\n\r\n            this.setState({ myFeatureLayer });\r\n            this.props.map.add(myFeatureLayer);\r\n\r\n            \r\n            // Create a polygon geometry\r\n            const polygon = {\r\n                type: \"polygon\", // autocasts as new Polygon()\r\n                rings: [\r\n                [-64.78, 32.3],\r\n                [-66.07, 18.45],\r\n                [-80.21, 25.78],\r\n                [-64.78, 32.3]\r\n                ]\r\n            };\r\n\r\n            // Create a symbol for rendering the graphic\r\n            const fillSymbol = {\r\n                type: \"simple-fill\", // autocasts as new SimpleFillSymbol()\r\n                color: [227, 139, 79, 0.8],\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                color: [255, 255, 255],\r\n                width: 1\r\n                }\r\n            };\r\n\r\n            // Add the geometry and symbol to a new graphic\r\n            const graphic = new Graphic({\r\n                geometry: polygon,\r\n                symbol: fillSymbol\r\n            });\r\n            this.setState({ graphic });\r\n            this.props.view.graphics.add(graphic);\r\n        }).catch((err) => console.error(err));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.map.remove(this.state.myFeatureLayer);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './ContentForm.css';\r\n\r\nclass ContentForm extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state ={   \r\n\t\t}\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n        \t<div className=\"Form\">            \r\n            <p className=\"Form__result\">{this.props.ContentFormResults}</p>\r\n        \t</div>\r\n        )\t    \r\n    }\r\n}\r\n \r\nexport default ContentForm","\r\nconst FeatureService = {\r\n    getAllFeatures: function() {  \r\n\t  fetch('https://localhost:44356/api/feature/GetAllFeatures')\r\n\t  .then(response => response.json())\r\n\t  .then(json => {\r\n\t    console.log('parsed json', json) // access json.body here\r\n\t  })\r\n\t    }\r\n}\r\n\r\nexport default FeatureService;","import React, { Component } from 'react';\r\nimport './Map.css';\r\nimport { Map } from '@esri/react-arcgis';\r\nimport MyFeatureLayer from '../MyFeatureLayer/MyFeatureLayer';\r\nimport ContentForm from '../ContentForm/ContentForm';\r\nimport FeatureService from '../../services/Feature.service';\r\n\r\nclass MapContainer extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state ={            \r\n\t\t\tmap: null,\r\n            view: null,\r\n            viewProperties: {\r\n                center: [-64.78, 32.3], scale: 100000000\r\n            },\r\n            status: 'loading'\r\n\t\t}\r\n\t\tthis.handleMapLoad = this.handleMapLoad.bind(this);\r\n        this.getFetures =  this.getFetures.bind(this);\r\n\t}\r\n\r\n\r\n    render() {\r\n        return (\r\n        \t<div className=\"Map\">            \r\n              <link rel=\"stylesheet\" href=\"https://js.arcgis.com/4.10/esri/css/main.css\"/>\r\n              <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.27/dijit/themes/claro/claro.css\"/>\r\n              <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.27/esri/css/esri.css\"/>\r\n\r\n            \t{this.state.status == \"loading\" && (<div className=\"load__page\"><div className=\"logo__load\"></div></div>)}\r\n            \t<Map style=\"z-index: 1;\" \tmapProperties={{ basemap: 'satellite' }}\r\n    \t\t\t    \tviewProperties={this.state.viewProperties} \r\n    \t\t\t        onLoad={this.handleMapLoad}>\r\n                <MyFeatureLayer\r\n                        featureLayerProperties={{ \r\n                        url: 'http://sampleserver6.arcgisonline.com/arcgis/rest/services/WorldTimeZones/MapServer/0'}}></MyFeatureLayer>                \r\n                </Map>\r\n                <ContentForm ContentFormResults={this.getFetures()} />\r\n        \t</div>\r\n        )\t    \r\n    }\r\n\r\n    getFetures(){\r\n        return FeatureService.getAllFeatures();\r\n    }\r\n\r\n    handleMapLoad(map, view) {\r\n    \tthis.setState({status: \"loaded\"});\r\n        this.setState({ map, view });\r\n    }\r\n\r\n}\r\n \r\nexport default MapContainer","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport MapContainer from './components/Map/Map';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <div className=\"App App-header\">\n        <Header />       \n      </div>\n      <div className=\"App-body\">\n        <MapContainer />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}